#! /usr/bin/env python3

from datetime import datetime, timezone
import email
import imaplib
from json import load, dump
from random import choice, sample
import re
from subprocess import run, PIPE
import sys
from time import asctime, sleep, time
from twilio.rest import Client


def get_last_text_body(time_cutoff):
    new_time_cutoff = datetime.now(timezone.utc)
    messages = twilio_client.messages.list()
    messages = [message for message in messages if message.from_ in whitelisted_numbers and message.date_sent and message.date_sent > time_cutoff]
    if len(messages) > 0:
        word_message = sorted(messages, key=lambda m: m.date_sent, reverse=True)[0]
        word = word_message.body.strip()
        return word, new_time_cutoff

    return None, new_time_cutoff

def get_last_email_subject():
    result, data = mail_client.uid('search', None, "ALL")
    latest_email_uid = data[0].split()[-1]
    result, data = mail_client.uid('fetch', latest_email_uid, '(RFC822)')
    raw_email = data[0][1]
    return email.message_from_bytes(raw_email)['Subject']


if __name__ == "__main__":
    with open('creds.json', 'r') as creds_file:
        creds = load(creds_file)
        twilio_creds = creds['twilio']
        email_creds = creds['email']
        account_sid = twilio_creds['account_sid']
        auth_token = twilio_creds['auth_token']
        mail_server_address = email_creds['address']
        mail_server_password = email_creds['password']

    twilio_client = Client(account_sid, auth_token)
    mail_client = imaplib.IMAP4_SSL('imap.gmail.com')
    mail_client.login(mail_server_address, mail_server_password)
    mail_client.select('inbox')

    names = list(set(map(lambda name: name.strip(), sys.argv[1:])))
    if len(names) != 5:
        print('must have 5 players!')
        sys.exit(1)

    with open('known_players.json', 'r') as known_players_file:
        players = {k: v for (k, v) in load(known_players_file).items() if k in names}

    unknown_players = set(names) - set(players.keys())
    if len(unknown_players) > 0:
        print('unknown player{}: {}'.format('' if len(unknown_players) == 1 else 's', ', '.join(unknown_players)))
        sys.exit(1)

    wolf, seer = sample(names, 2)

    time_cutoff = datetime.now(timezone.utc)

    whitelisted_numbers = {players[player]['phone'] for player in players.keys() if 'phone' in players[player]}
    print(whitelisted_numbers)

    while True:
        text_body, time_cutoff = get_last_text_body(time_cutoff)
        if text_body:
            
        #print('last text body: {}'.format(text_body))
        #print('last email subject: {}'.format(get_last_email_subject()))
        sleep(3)

#inputs = sorted(messages, key=lambda m: m.date_sent)
#
#for i in inputs:
#    b = i.body
#    if b[:len(run_command)].lower() == run_command.lower():
#        command = re.sub(u'[\u201c\u201d]', '"', b[len(run_command) + 1:])
#        try:
#            result = run(['bash', '-c', command], stdout=PIPE, stderr=PIPE)
#            send_text(to=i.from_, text='RESULT.OUT:\n{}\n\nRESULT.ERR:\n{}'.format(result.stdout.decode('utf-8'), result.stderr.decode('utf-8')), label='"{}"'.format(command))
#        except Exception as e:
#            send_text(to=i.from_, text='RESULT (ERRORED):\n{}'.format(str(e)), label='"{}"'.format(command))
#
